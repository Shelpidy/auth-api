version: "3.8"

services:
  postgres:
    image: postgres:17
    container_name: auth_database
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  setup:
    build:
      context: .
      target: prod
    container_name: auth_setup
    command: >
      /bin/sh -c "
        echo 'Waiting for postgres...' &&
        while ! nc -z postgres 5432; do sleep 1; done &&
        echo 'PostgreSQL started' &&
        npm run setup:prod
      "
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - app_network

  api:
    build:
      context: .
      target: prod
      args:
        - NODE_ENV=production
    container_name: auth_server
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${PORT:-5000}:5000"
    volumes:
      - ./logs:/usr/src/app/logs
      - ./uploads:/usr/src/app/uploads
    depends_on:
      setup:
        condition: service_completed_successfully
    networks:
      - app_network

  caddy:
    image: caddy:2
    container_name: auth_caddy
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./logs/caddy:/var/log/caddy
    depends_on:
      - api
    networks:
      - app_network

volumes:
  caddy_data:
    name: auth_api_caddy_data
  caddy_config:
    name: auth_api_caddy_config

networks:
  app_network:
    name: auth_api_network
    driver: bridge
