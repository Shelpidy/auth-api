version: "3.8"

services:
  api:
    build:
      context: .
      target: prod
    container_name: auth_api_prod
    restart: always

    ports:
      - "5000:5000"

    environment:
      # Server Configuration
      - NODE_ENV=production
      - PORT=5000

      # Database Configuration
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

      # Authentication
      - JWT_SECRET=${JWT_SECRET}

      # OAuth Providers
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}

      # SMTP Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    volumes:
      - ./logs:/usr/src/app/logs
    networks:
      - app_network

  caddy:
    image: caddy:2
    container_name: auth_caddy_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./prod/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api

    networks:
      - app_network

volumes:
  caddy_data:
  caddy_config:

networks:
  app_network:
    driver: bridge
